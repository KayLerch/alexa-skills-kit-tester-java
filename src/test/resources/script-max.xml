<?xml version="1.0"?>
<test xmlns="http://klerch.io/alexa/skills-kit-tester"
      xmlns:xsi="http://www.w3.org/2001/XMLSchema-instance"
      xsi:schemaLocation="http://klerch.io/alexa/skills-kit-tester testScript.xsd">
    <configuration>
        <endpoint>myLambdaFunctionName</endpoint>
        <locale>de-DE</locale>
        <application id="myApplicationId" />
        <user id="myUserId" accessToken="myAccessToken" />
        <debugFlagSessionAttribute>myDebugFlag</debugFlagSessionAttribute>
    </configuration>
    <sessions>
        <session>
            <launch>
                <!-- try out all assertions -->
                <assertFalse assertion="SessionEnded" />
                <assertTrue assertion="HasCard" />
                <assertFalse assertion="HasCardIsSimple" />
                <assertTrue assertion="HasCardIsStandard" />
                <assertFalse assertion="HasCardIsLinkAccount" />
                <assertTrue assertion="HasRepromptSpeech" />
                <assertTrue assertion="HasRepromptSpeechIsSsml" />
                <assertFalse assertion="HasRepromptSpeechIsPlainText" />
                <assertTrue assertion="HasOutputSpeech" />
                <assertTrue assertion="HasOutputSpeechIsSsml" />
                <assertFalse assertion="HasOutputSpeechIsPlainText" />
                <assertFalse assertion="HasDirective" />
                <assertFalse assertion="HasDirectiveIsPlay" />
                <assertFalse assertion="HasDirectiveIsPlayWithReplaceAll" />
                <assertFalse assertion="HasDirectiveIsPlayWithEnqueue" />
                <assertFalse assertion="HasDirectiveIsPlayWithReplaceEnqueued" />
                <assertFalse assertion="HasDirectiveIsStop" />
                <assertFalse assertion="HasDirectiveIsClearQueue" />
                <assertFalse assertion="HasDirectiveIsClearQueueWithClearAll" />
                <assertFalse assertion="HasDirectiveIsClearQueueWithClearEnqueued" />
                <!-- try out all assets-->
                <assertExists asset="Card" />
                <assertNotExists asset="SimpleCard" />
                <assertNotEquals asset="SimpleCardTitle" value="whatever" />
                <assertNotExists asset="SimpleCardContent" />
                <assertExists asset="StandardCard" />
                <assertEquals asset="StandardCardTitle" value="card_title" />
                <assertMatches asset="StandardCardText" value="[card_tex]*" />
                <assertExists asset="StandardCardImage" />
                <assertEquals asset="StandardCardSmallImageUrl" value="https://img/small.jpg" />
                <assertMatches asset="StandardCardLargeImageUrl" value="https://[a-z/.]*jpg" />
                <assertNotExists asset="LinkAccountCard" />
                <assertNotExists asset="LinkAccountCardTitle" />
                <assertExists asset="OutputSpeech" />
                <assertMatches asset="OutputSpeechSsml" value=".*test.*" />
                <assertExists asset="RepromptSpeech" />
                <assertMatches asset="RepromptSpeechSsml" value=".*test.*" />
                <assertNotEquals asset="RepromptSpeechPlainText" value="test" />
                <assertNotExists asset="DirectivePlay" />
                <assertNotExists asset="DirectivePlayBehavior" />
                <assertNotExists asset="DirectivePlayAudioItem" />
                <assertNotExists asset="DirectivePlayAudioItemStream" />
                <assertNotExists asset="DirectivePlayAudioItemStreamPreviousToken" />
                <assertNotExists asset="DirectivePlayAudioItemStreamOffset" />
                <assertNotExists asset="DirectivePlayAudioItemStreamToken" />
                <assertNotExists asset="DirectivePlayAudioItemStreamUrl" />
                <assertNotExists asset="DirectiveClearQueue" />
                <assertNotExists asset="DirectiveClearQueueBehavior" />
                <assertNotExists asset="DirectiveStop" />
                <!-- try out all session assertions-->
                <assertSessionStateExists key="myDebugFlag" />
                <assertSessionStateNotNull key="myDebugFlag" />
                <assertSessionStateNotBlank key="myDebugFlag" />
                <assertSessionStateEquals key="myDebugFlag" value="true" />
                <assertSessionStateContains key="myDebugFlag" value="ru" />
                <assertSessionStateMatches key="myDebugFlag" value="[ertu]*" />
                <!-- try out other assertions -->
                <assertExecutionTimeLessThan value="1000" />
                <assertSessionStillOpen />
            </launch>
            <delay value="1000" />
            <intent name="intent0">
                <assertTrue assertion="HasCard" />
                <assertFalse assertion="SessionEnded" />
                <assertNotExists asset="OutputSpeechPlainText" />
                <assertNotEquals asset="OutputSpeechPlainText" value="test"/>
                <assertMatches asset="OutputSpeechSsml" value=".*test.*" />
                <assertExists asset="OutputSpeechSsml" />
            </intent>
            <intent name="intent1">
                <request>
                    <slots>
                        <slot key="slot1" value="val" />
                        <slot key="slot2" value="123" />
                    </slots>
                </request>
                <assertSessionStateEquals key="slot1" value="val" />
                <assertSessionStateEquals key="slot2" value="123" />
                <assertSessionStateEquals key="myDebugFlag" value="true" />
            </intent>
            <yes>
                <assertSessionStateEquals key="intent" value="AMAZON.YesIntent" />
                <assertSessionStateEquals key="slot1" value="val" />
                <assertSessionStateEquals key="slot2" value="123" />
                <assertSessionStillOpen />
            </yes>
            <no>
                <assertSessionStateEquals key="intent" value="AMAZON.NoIntent" />
                <assertSessionStillOpen />
            </no>
            <repeat>
                <assertSessionStateEquals key="intent" value="AMAZON.RepeatIntent" />
                <assertSessionStillOpen />
            </repeat>
            <cancel>
                <assertSessionStateEquals key="intent" value="AMAZON.CancelIntent" />
                <assertSessionStillOpen />
            </cancel>
            <stop>
                <assertSessionStateEquals key="intent" value="AMAZON.StopIntent" />
                <assertSessionStillOpen />
            </stop>
            <startOver>
                <assertSessionStateEquals key="intent" value="AMAZON.StartOverIntent" />
                <assertSessionStillOpen />
            </startOver>
            <help>
                <assertSessionStateEquals key="intent" value="AMAZON.HelpIntent" />
                <assertSessionStillOpen />
            </help>
        </session>
        <session>
            <next>
                <assertSessionStateEquals key="intent" value="AMAZON.NextIntent" />
                <assertSessionStillOpen />
            </next>
            <previous>
                <assertSessionStateEquals key="intent" value="AMAZON.PreviousIntent" />
                <assertSessionStillOpen />
            </previous>
            <pause>
                <assertSessionStateEquals key="intent" value="AMAZON.PauseIntent" />
                <assertSessionStillOpen />
            </pause>
            <resume>
                <assertSessionStateEquals key="intent" value="AMAZON.ResumeIntent" />
                <assertSessionStillOpen />
            </resume>
        </session>
        <session>
            <shuffleOn>
                <assertSessionStateEquals key="intent" value="AMAZON.ShuffleOnIntent" />
                <assertSessionStillOpen />
            </shuffleOn>
            <shuffleOff>
                <assertSessionStateEquals key="intent" value="AMAZON.ShuffleOffIntent" />
                <assertSessionStillOpen />
            </shuffleOff>
            <loopOn>
                <assertSessionStateEquals key="intent" value="AMAZON.LoopOnIntent" />
                <assertSessionStillOpen />
            </loopOn>
            <loopOff>
                <assertSessionStateEquals key="intent" value="AMAZON.LoopOffIntent" />
                <assertSessionStillOpen />
            </loopOff>
        </session>
    </sessions>
</test>